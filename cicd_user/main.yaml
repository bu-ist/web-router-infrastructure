AWSTemplateFormatVersion: '2010-09-09'

Description: create an account to use for GitHub actions SAM deployment

Parameters:
  awsAmazonS3ReadOnlyAccess:
    Type: String
    Description: arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
    Default: arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
  Service:
    Type: String

  Function:
    Type: String

  Landscape:
    Type: String

  Ticket:
    Type: String

  Alias:
    Type: String
    Default: "domain-redirect-test.app-nprd.aws-cloud.bu.edu"

  AppName:
    Type: String
    Default: domain-redirector

  AccountName:
    Type: String
    Default: "cicd-user"

Resources:

  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref Alias
      DomainValidationOptions:
        - DomainName: "domain-redirect-test"
          HostedZoneId: "Z096158710VMM16NBY90G"
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Ref Alias

  SIEMBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      # AccessControl: LogDeliveryWrite 
      BucketName: !Sub "${AWS::StackName}-buildbucket-s3"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
        - Status: Enabled
          Id: BuildExpire
          ExpirationInDays: 7
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-buildbuckect-s3"
        - Key: Ticket
          Value: !Ref 'Ticket'
        - Key: Service
          Value: !Ref 'Service'
        - Key: Function
          Value: !Ref 'Function'
        - Key: Landscape
          Value: !Ref 'Landscape'

  SiemUser:
    Type: AWS::IAM::User
    Properties: 
      UserName: !Ref AccountName
      Policies: 
        - PolicyName: SAMDeploy
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action: 
                - iam:GetUser
                - iam:ListAccessKeys
                - iam:CreateAccessKey
                - iam:DeleteAccessKey
                - iam:GetAccessKeyLastUsed
                - iam:UpdateAccessKey
                Resource:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:user/${AccountName}'
              - Effect: Allow
                Action:
                - lambda:*
                Resource:
                  - !Sub 'arn:aws:lambda::${AWS::AccountId}:function:domain-redirector*'
                  - !Sub 'arn:aws:lambda::${AWS::AccountId}:function:${AppName}*'
              - Effect: Allow
                Action:
                - iam:*
                Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AppName}*'
              - Effect: Allow
                Action:
                - cloudformation:*
                Resource:
                - !Sub 'arn:aws:cloudformation::${AWS::AccountId}:stack/${AppName}*'
                - !Sub 'arn:aws:cloudformation::${AWS::AccountId}:stack/${AppName}*/*'
                - '*'
              - Effect: Allow
                Action:
                - acm:Get*
                - apigateway:*
                - cloudformation:Describe*
                - cloudformation:Get*
                - apigateway:Get*
                - iam:Get*
                - iam:CreateServiceLinkedRole
                - lambda:*
                - route53:*
                - sts:GetCallerIdentity
                Resource: "*"
              - Effect: Allow
                Action:
                - s3:*
                Resource: 
                - !Sub 'arn:aws:s3:::${AWS::StackName}-buildbucket-s3'
                - !Sub 'arn:aws:s3:::${AWS::StackName}-buildbucket-s3/*'
      Tags:
        - Key: Name
          Value: !Ref AccountName
        - Key: Ticket
          Value: !Ref 'Ticket'
        - Key: Service
          Value: !Ref 'Service'
        - Key: Function
          Value: !Ref 'Function'
        - Key: Landscape
          Value: !Ref 'Landscape' 

  SiemUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        !Ref SiemUser

Outputs:
  LogUser:
    Value:  !GetAtt SiemUser.Arn
    Export:
      Name: !Sub "${AWS::StackName}-cicduser-arn"

  AccessKeyforLogUserAccessKey:
    Value: !Ref SiemUserAccessKey

  ACMCertificate:
    Value: !Ref ACMCertificate

  SecretKeyforLogUserAccessKey:
    Value: !GetAtt SiemUserAccessKey.SecretAccessKey