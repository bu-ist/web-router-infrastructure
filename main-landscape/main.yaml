Description: >
  This template illustrates how to use AWS CodeBuild and AWS CodePipeline to
  achieve continuous deployment of source code from a GitHub repository via a
  Docker container to an Amazon EC2 Container Service cluster.


Parameters:
  TemplateBucket:
    Type: String
    Description: "URL prefix for S3 bucket containing the nested templates"
  TemplatePath:
    Type: String
    Default: "template"
  Prefix:
    Type: String
    Default: "web2cloud-test"
  VpcPrefix:
    Type: String
    Default: "web2cloud-prod"
  Landscape:
    Type: String
    Default: "test"
  RouterImage:
    Type: String
    Default: ""
    #Default: "latest"
  RouterTag:
    Type: String
    Default: "latest"
  DockerImage:
    Type: String
    Default: "bufe-buedu"
  HostedZoneId:
    Description: "The Route53 Hosted Zone id.  If present then this will create a Route53 record pointing to the ALB along with an Amazon managed certificate"
    Type: String
    Default: ""
  HostedZoneName:
    Description: "The Route53 Hosted Zone name.  This will be used for building the domain names."
    Type: String
    Default: ""
  PublicAlbAcmCertificate:
    AllowedPattern: ^$|(arn:aws:acm:)([a-z0-9/:-])*([a-z0-9])$
    Description: '[ Optional ] The AWS Certification Manager certificate ARN for the ALB certificate - this certificate should be created in the region you wish to run the ALB and must reference the WordPress domain name you use below.'
    Type: String
    Default: "arn:aws:acm:us-east-1:187621470568:certificate/6504f5c8-0e04-4032-b0a2-b65deefb9b8e"
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  CPUReservationNGINX:
    Type: Number
    Default: '128'
    Description: CPU slots to reserve for each NGINX container
  MemoryLimitNGINX:
    Type: Number
    Default: '300'
    Description: Max memory reserved for each NGINX container
  DesiredServiceCapacity:
    Type: Number
    Default: '1'
    Description: Number of NGINX container to launch in your ECS cluster.
  MaxServiceCapacity:
    Type: Number
    Default: '1'
    Description: Maximum number of NGINX container to launch in your ECS cluster.
  MinServiceCapacity:
    Type: Number
    Default: '1'
    Description: Minimum number of NGINX container to launch in your ECS cluster.
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  MinSize:
    Type: Number
    Default: '1'
    Description: Minimum number of instances that can be launched in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '2'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge, m5.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
    ConstraintDescription: Please choose a valid instance type.

  # go to https://github.com/settings/tokens to generate a value for this entry
  GitHubToken:
    Type: String

  GitHubRepo:
    Type: String
    Default: docker-bufe-buedu

  GitHubBranch:
    Type: String
    Default: master

  GitHubUser:
    Type: String
    Default: dsmk

Conditions:
  DoDefaultImageCondition:
    !Equals [ '' , !Ref 'RouterImage' ]

#Metadata:
#  AWS::CloudFormation::Interface:
#    ParameterLabels:
#      GitHubUser:
#        default: "User"
#      GitHubRepo:
#        default: "Repo"
#      GitHubBranch:
#        default: "Branch"
#      GitHubToken:
#        default: "Personal Access Token"
#    ParameterGroups:
#      - Label:
#          default: GitHub Configuration
#        Parameters:
#          - GitHubRepo
#          - GitHubBranch
#          - GitHubUser
#          - GitHubToken
#

Resources:
  EcsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucket}/${TemplatePath}/webfe/main/ecs.yaml"
      Parameters:
        Prefix: !Sub "${Prefix}"
        VpcPrefix: !Sub "${VpcPrefix}"
        Landscape: !Sub "${Landscape}"
        PublicAlbAcmCertificate: !Sub "${PublicAlbAcmCertificate}"
        KeyName: !Sub "${KeyName}"
        DesiredCapacity: !Sub "${DesiredCapacity}"
        MinSize: !Sub "${MinSize}"
        MaxSize: !Sub "${MaxSize}"
        HostedZoneId: !Ref HostedZoneId
        HostedZoneName: !Ref HostedZoneName
        InstanceType: !Ref "InstanceType"

  WebRouterService:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucket}/${TemplatePath}/webfe/main/service.yaml"
      Parameters:
        RouterImage: !If
          - DoDefaultImageCondition
          - "Fn::ImportValue": !Sub "${Prefix}-container-repository-uri"
          - !Ref "RouterImage"
        Prefix: !Sub "${Prefix}"
        Landscape: !Sub "${Landscape}"
        PublicAlbAcmCertificate: !Sub "${PublicAlbAcmCertificate}"
        ECSCluster: !GetAtt [ "EcsStack", "Outputs.ECSCluster" ]
        CloudwatchLogsGroup: !GetAtt [ "EcsStack", "Outputs.CloudwatchLogsGroup" ]
        Port80TargetGroup: !GetAtt [ "EcsStack", "Outputs.Port80TargetGroup" ]
        Port443TargetGroup: !GetAtt [ "EcsStack", "Outputs.Port443TargetGroup" ]
        DesiredServiceCapacity: !Ref 'DesiredServiceCapacity'
        MaxServiceCapacity: !Ref 'MaxServiceCapacity'
        MinServiceCapacity: !Ref 'MinServiceCapacity'
        CPUReservationNGINX: !Ref 'CPUReservationNGINX'
        MemoryLimitNGINX: !Ref 'MemoryLimitNGINX'

  Pipeline:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucket}/${TemplatePath}/webfe/main/pipeline.yaml"
      Parameters:
        Prefix: !Sub "${Prefix}"
        VpcPrefix: !Sub "${VpcPrefix}"
        Landscape: !Sub "${Landscape}"
        GitHubToken: !Sub "${GitHubToken}"
        GitHubRepo: !Sub "${GitHubRepo}"
        GitHubBranch: !Sub "${GitHubBranch}"
        GitHubUser: !Sub "${GitHubUser}"
        PublicAlbAcmCertificate: !Sub "${PublicAlbAcmCertificate}"
        ECSCluster: !GetAtt [ "EcsStack", "Outputs.ECSCluster" ]
        Port80Service: !GetAtt [ "WebRouterService", "Outputs.Port80Service" ]
        Port443Service: !GetAtt [ "WebRouterService", "Outputs.Port443Service" ]

#  CloudFront:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      TemplateURL: !Sub "${TemplateBucket}/${TemplatePath}/webfe/main/${Landscape}/cloudfront.yaml"
#      Parameters:
#        Prefix: !Sub "${Prefix}"
#        Landscape: !Sub "${Landscape}"
#        RoutingOriginDNS: !GetAtt [ "EcsStack", "Outputs.WebRouterALBDNS" ]
#        PublicAlbAcmCertificate: !Sub "${PublicAlbAcmCertificate}"

Outputs:
  WebRouterDNS:
    Value: !GetAtt [ "EcsStack", "Outputs.WebRouterALBDNS" ]
    Export:
      Name: !Sub "${AWS::StackName}-webrouter-dnsname"
