AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Prefix:
    Type: String
    Default: "web2cloud-test"
  VpcPrefix:
    Type: String
    Default: "web2cloud-nonprod"
  Landscape:
    Type: String
    Default: "test"
  Tag:
    Type: String
    Default: "9035b0c7"
    #Default: "latest"
  DockerImage:
    Type: String
    Default: "bufe-buedu"
  HostedZoneId:
    Description: "The Route53 Hosted Zone id.  If present then this will create a Route53 record pointing to the ALB along with an Amazon managed certificate"
    Type: String
    Default: ""
  HostedZoneName:
    Description: "The Route53 Hosted Zone name.  This will be used for building the domain names."
    Type: String
    Default: ""
  PublicAlbAcmCertificate:
    #AllowedPattern: ^$|(arn:aws:acm:)([a-z0-9/:-])*([a-z0-9])$
    Description: '[ Optional ] The AWS Certification Manager certificate ARN for the ALB certificate - this certificate should be created in the region you wish to run the ALB and must reference the WordPress domain name you use below.'
    Type: String
    Default: "arn:aws:acm:us-east-1:187621470568:certificate/6504f5c8-0e04-4032-b0a2-b65deefb9b8e"
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  MinSize:
    Type: Number
    Default: '1'
    Description: Minimum number of instances that can be launched in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '3'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  IdleTimeoutForLB:
    Type: Number
    Default: '3600'
    Description: Maximum number of seconds a loadbalancer connection can be idle (high for Link batch apps)
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge, m5.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
    ConstraintDescription: Please choose a valid instance type.
  ScaleUpPercent:
    Type: Number
    Default: '80'
    Description: Percent threshold above which we add more ECS nodes
  ScaleDownPercent:
    Type: Number
    Default: '20'
    Description: Percent threshold above which we add more ECS nodes
Conditions:
  SslCertificate:
    !Not [!Equals [ '', !Ref PublicAlbAcmCertificate ] ]
  NotSslCertificate:
    !Equals [ '', !Ref 'PublicAlbAcmCertificate' ]
  IsHostedZone:
    !Not [ !Equals [ '', !Ref HostedZoneId ] ]
Mappings:
  # The location for this info is:
  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI_launch_latest.html
  AWSRegionToAMI:
    us-east-1:
      #AMIID: ami-9eb4b1e5
      # 2017.03 Image ID
      #AMIID: ami-0e297018
      #AMIID: ami-fad25980
      AMIID: ami-28456852
    us-west-2:
      # DR alternate region
      #AMIID: ami-7abc111a
      AMIID: ami-decc7fa6
Resources:
  LBCertificate:
    Condition: IsHostedZone
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "webrouter-${Landscape}.${HostedZoneName}"
      DomainValidationOptions:
      - DomainName: !Sub "webrouter-${Landscape}.${HostedZoneName}"
        HostedZoneId: !Ref HostedZoneId
      Tags:
        - Key: Name
          Value: !Sub "webrouter-${Landscape}.${HostedZoneName}"
        - Key: Service
          Value: websites
        - Key: Function
          Value: webrouter
        - Key: Landscape
          Value: !Ref 'Landscape'
      ValidationMethod: DNS
  DomainRecordSet:
   Condition: IsHostedZone
   Type: 'AWS::Route53::RecordSet'
   Properties:
    Comment: !Sub "WebRouter ALB: webrouter-${Landscape}.${HostedZoneName}"
    HostedZoneId: !Ref HostedZoneId
    Name: !Sub "webrouter-${Landscape}.${HostedZoneName}."
    ResourceRecords:
      - !GetAtt WebRouterALB.DNSName
    Type: CNAME
    TTL: 300
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Prefix}-ecscluster"
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "ECSLogGroup-${AWS::StackName}"
      RetentionInDays: 14
  WebRouterALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Prefix}-alb"
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: !Ref IdleTimeoutForLB
      Subnets:
        - "Fn::ImportValue": !Sub "${VpcPrefix}-PublicSubnet1ID"
        - "Fn::ImportValue": !Sub "${VpcPrefix}-PublicSubnet2ID"
      SecurityGroups:
      - "Fn::ImportValue": !Sub "${Prefix}-loadbalancer-sg"
  WebRouterListener443:
    Condition: IsHostedZone
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !If
        - SslCertificate
        - !Ref PublicAlbAcmCertificate
        - !Ref LBCertificate
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebRouterTG443
      LoadBalancerArn: !Ref WebRouterALB
      Port: 443
      Protocol: HTTPS
  WebRouterListener443Rule:
    Condition: IsHostedZone
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: WebRouterListener80
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebRouterTG443'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'WebRouterListener443'
      Priority: 1
  WebRouterListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'WebRouterTG80'
      LoadBalancerArn: !Ref 'WebRouterALB'
      Port: '80'
      Protocol: HTTP
  WebRouterListener80Rule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: WebRouterListener80
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebRouterTG80'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'WebRouterListener80'
      Priority: 1
  WebRouterTG80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: WebRouterALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /server/healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub "${Prefix}-p80-tg"
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        "Fn::ImportValue": !Sub "${VpcPrefix}-VPCID"
  WebRouterTG443:
    # Condition: SslCertificate
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: WebRouterALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /server/healthcheck
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub "${Prefix}-p443-tg"
      Port: 443
      Protocol: HTTPS
      UnhealthyThresholdCount: 2
      VpcId:
        "Fn::ImportValue": !Sub "${VpcPrefix}-VPCID"

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - "Fn::ImportValue": !Sub "${VpcPrefix}-FrontEndSubnet1AID"
        - "Fn::ImportValue": !Sub "${VpcPrefix}-FrontEndSubnet2AID"
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: !Ref 'MinSize'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} - ECS Host"
          PropagateAtLaunch: true
        - Key: PatchLandscape
          Value: "test"
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups:
      - "Fn::ImportValue":  !Sub "${Prefix}-containers-sg"
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile:
        "Fn::ImportValue":  !Sub "${Prefix}-instance-profile"
      KeyName: !Ref 'KeyName'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap amazon-ssm-agent
          start amazon-ssm-agent
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  CPUScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: PercentChangeInCapacity
      AutoScalingGroupName: !Ref "ECSAutoScalingGroup"
      Cooldown: 300
      ScalingAdjustment: 30

  CPUScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref "ECSAutoScalingGroup"
      EstimatedInstanceWarmup: 300
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: "-1"

  CPUReservationAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions: [ !Ref "CPUScaleUpPolicy" ]
      AlarmDescription: "Alarm if CPU too high or metric disappears"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref "ECSCluster"
      EvaluationPeriods: 1
      MetricName: CPUReservation
      Namespace: AWS/ECS
      Period: 300
      Statistic: Maximum
      Threshold: !Ref "ScaleUpPercent"
      Unit: Percent

  # scale down based on https://github.com/nclouds/nclouds_jenkins/blob/master/infrastructure/ecs-cluster.yaml#L172
  CPUScaleDownAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions: [ !Ref "CPUScaleDownPolicy" ]
      AlarmDescription: "CPU utilization has dropped below scale-in threshold for more than 3 minutes"
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref "ECSCluster"
      EvaluationPeriods: 3
      MetricName: CPUReservation
      Namespace: AWS/ECS
      Period: 300
      Statistic: Average
      Threshold: !Ref "ScaleDownPercent"
      Unit: Percent

 # ServiceScalingTarget:
 #   Type: AWS::ApplicationAutoScaling::ScalableTarget
 #   Properties:
 #     MaxCapacity: 2
 #     MinCapacity: 1
 #     ResourceId: !Join ['', [service/, !Ref 'ECSCluster', /, !GetAtt [service, Name]]]
 #     RoleARN:
 #       "Fn::ImportValue": !Sub "${Prefix}-autoscaling-role-arn"
 #     ScalableDimension: ecs:service:DesiredCount
 #     ServiceNamespace: ecs
 # ServiceScalingPolicy:
 #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
 #   Properties:
 #     PolicyName: AStepPolicy
 #     PolicyType: StepScaling
 #     ScalingTargetId: !Ref 'ServiceScalingTarget'
 #     StepScalingPolicyConfiguration:
 #       AdjustmentType: PercentChangeInCapacity
 #       Cooldown: 60
 #       MetricAggregationType: Average
 #       StepAdjustments:
 #       - MetricIntervalLowerBound: 0
 #         ScalingAdjustment: 200
  #ALB500sAlarmScaleUp:
  #  Type: AWS::CloudWatch::Alarm
  #  Properties:
  #    EvaluationPeriods: '1'
  #    Statistic: Average
  #    Threshold: '10'
  #    AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
  #    Period: '60'
  #    AlarmActions: [!Ref 'ServiceScalingPolicy']
  #    Namespace: AWS/ApplicationELB
  #    Dimensions:
  #    - Name: ECSService
  #      Value: !Ref 'service'
  #    ComparisonOperator: GreaterThanThreshold
  #    MetricName: HTTPCode_ELB_5XX_Count
Outputs:
  ECSCluster:
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Sub "${Prefix}-ecscluster-ref"
  CloudwatchLogsGroup:
    Value: !Ref 'CloudwatchLogsGroup'
    Export:
      Name: !Sub "${Prefix}-test-logs-group"
  IsSSL:
    Value: !If
      - SslCertificate
      - 'true'
      - 'false'
    Export:
      Name: !Sub "${Prefix}-is-targetgroup443"
  Port443TargetGroup:
    # Condition: SslCertificate
    Value: !Ref WebRouterTG443
    Export:
      Name: !Sub "${Prefix}-targetgroup443-arn"
  Port80TargetGroup:
    Value: !Ref WebRouterTG80
    Export:
      Name: !Sub "${Prefix}-targetgroup80-arn"
  WebRouterALBDNS:
    Value: !GetAtt [ WebRouterALB, DNSName]
    Export:
      Name: !Sub "${Prefix}-buedu-alb-dnsname"
